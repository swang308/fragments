# .github/workflows/cd.yml

# Continuous Delivery Workflow

# Trigger this workflow whenever a new tag is pushed.
# Tags should follow the format 'vX.Y.Z'.

name: cd

on:
  push:
    tags:
      - 'v**'

jobs:
  aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS credentials
      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and push Docker image to Amazon ECR
      - name: Build and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # Step 6: Build and push Docker image to Docker Hub
      - name: Build, tag, and push image to Docker Hub
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t swang308/fragments:${{ github.ref_name }} --push .
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t swang308/fragments:latest --push .

      # Step 7: Update ECS Task Definition
      - name: Update ECS Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          container-name: fragments-container
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          environment-variables: |
            LOG_LEVEL=debug
            NODE_ENV=production
            AWS_COGNITO_POOL_ID=us-east-1_w2hBqz0Mv
            AWS_COGNITO_CLIENT_ID=73bnq1q30k79bv6ok5akhefls8
            API_URL=fragments-lb-1729897819.us-east-1.elb.amazonaws.com
            PORT=8080
            AWS_S3_BUCKET_NAME=swang308-fragments
            AWS_DYNAMODB_TABLE_NAME=fragments

      # Step 8: Deploy ECS Task Definition
      - name: Deploy ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster
          service: fragments-service
          wait-for-service-stability: true
